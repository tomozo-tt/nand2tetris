// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // iビット(instruction[15])が0ならA命令、1ならC命令。
    // A命令または、C命令かつd1ビット!=1ならばAレジスタの入力のためにinstructionを出力する。
    Not (in=instruction[15], out=isAinstruction);  // A命令のとき1
    Not (in=instruction[5], out=d1isnot1);  // d1ビット!=1のとき1
    And (a=instruction[15], b=d1isnot1, out=instructionFlug);  // C命令かつd1ビット!=1
    Or (a=isAinstruction, b=instructionFlug, out=ALUoutAwriteFlag);
    Mux16 (a=ALUout, b=instruction, sel=ALUoutAwriteFlag, out=ALUoutorinstruction);
    
    // Aレジスタで値をloadするのは、A命令のとき、またはC命令かつd1ビット=1のとき
    And (a=instruction[15], b=instruction[5], out=isCinstructionandd1is1);  // C命令かつd1ビット=1
    Or (a=isAinstruction, b=isCinstructionandd1is1, out=ARegisterLoadFlag);  // A命令のとき、またはC命令かつd1ビット=1
    ARegister (in=ALUoutorinstruction, load=ARegisterLoadFlag, out=A, out[0..14]=addressM);

    Mux16 (a=A, b=inM, sel=instruction[12], out=AorM);  // sel=C命令におけるaビット  0: Aレジスタの値, 1: Memory[A]
    DRegister (in=ALUout, load=instruction[4], out=D);  // load=C命令におけるd2ビット

    // c1(instruction[11]) 〜 c6(instruction[6]) がALUの各制御ビットに対応
    ALU (x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng);

    // C命令かつ、d3ビットが1であればwriteMが1になる
    And (a=instruction[3], b=instruction[15], out=writeM);

    // zrとngによってjump判定
    And (a=ng, b=instruction[2], out=j1);
    And (a=zr, b=instruction[1], out=j2);
    Not (in=zr, out=Notzr);
    Not (in=ng, out=Notng);
    And (a=Notzr, b=Notng, out=pg);
    And (a=pg, b=instruction[0], out=j3);
    Or8Way (in[0]=j1, in[1]=j2, in[2]=j3, in[3..7]=false, out=jump0);
    // C命令であればジャンプ
    And (a=jump0, b=instruction[15], out=jump);

    PC (in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);
}